from AlgorithmImports import *
import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from datetime import datetime, timedelta

class NQLassoDailyExample(QCAlgorithm):

    # ------------------------------------------------------------
    # 1) INITIALISE BACKTEST
    # ------------------------------------------------------------
    def initialize(self):
        self.set_start_date(2014, 1, 1)
        self.set_end_date(2024, 12, 31)
        self.set_cash(100_000)

        # Add the regular future and set its filter (optional)
        future = self.add_future(Futures.Indices.NASDAQ_100_E_MINI, Resolution.DAILY)
        future.set_filter(0, 180)

        # Add a continuous future contract by configuring AddFuture appropriately
        cf = self.add_future(
            Futures.Indices.NASDAQ_100_E_MINI,
            data_normalization_mode=DataNormalizationMode.BACKWARDS_RATIO,
            data_mapping_mode=DataMappingMode.OPEN_INTEREST,
            contract_depth_offset=0,
            resolution=Resolution.DAILY
        )
        self.symbol = cf.symbol

        self.train(self.date_rules.on(2021, 1, 1), self.time_rules.at(0, 0), self.TrainModel)
        self.TrainModel()
        self.hist_df = self.model_df.copy()

    # ------------------------------------------------------------
    # 2) MODEL TRAINING (OFF‑LINE, PRE-2021)
    # ------------------------------------------------------------
    def TrainModel(self):
        hist = self.History(
        [ self.symbol ],                       # <-- note the list
        datetime(2014, 1, 1),
        datetime(2020, 12, 31),
        Resolution.Daily
        )

        if hist.empty:
            raise Exception("No history returned for NQ!")

        df = hist[['open','high','low','close','volume']].copy()
        df['return'] = df['close'].diff()                              # point return
        # --- identical engineered features ---
        df['ema10']       = df['close'].ewm(span=10, adjust=False).mean()
        df['ema20']       = df['close'].ewm(span=20, adjust=False).mean()
        df['ema50']       = df['close'].ewm(span=50, adjust=False).mean()
        df['lag1_return'] = df['return'].shift(1)
        df['lag2_return'] = df['return'].shift(2)
        df['roll_std_10'] = df['return'].rolling(window=10).std()
        df['roll_std_20'] = df['return'].rolling(window=20).std()
        df['lag1_close']  = df['close'].shift(1)
        df.dropna(inplace=True)

        # --------------- train / test split ---------------
        train = df.loc['2015':'2020']                       # matches original effective range

        self.features = ['ema10','ema20','ema50',
                         'lag1_return','lag2_return',
                         'roll_std_10','roll_std_20',
                         'lag1_close']
        target = 'close'

        X_train = train[self.features]
        y_train = train[target]

        self.scaler = StandardScaler()
        X_train_scaled = self.scaler.fit_transform(X_train)

        self.model = Lasso(alpha=0.01, max_iter=10_000)
        self.model.fit(X_train_scaled, y_train)

        # store for ongoing feature updates
        self.model_df = df.copy()

        self.Log("Lasso trained.  Coefficients: " +
                 ", ".join(f"{f}:{w:.5f}" for f,w in zip(self.features, self.model.coef_)))

    # ------------------------------------------------------------
    # 3) DAILY LOOP (2021‑01‑01 … 2024‑12‑31)
    # ------------------------------------------------------------
    def OnData(self, data: Slice):
        # only operate during the designated out‑of‑sample window
        if self.Time < datetime(2021, 1, 1): 
            return

        bar = data.Bars.get(self.symbol)
        if bar is None:
            return

        # append today’s bar so rolling calculations remain exact
        ts = self.Time
        new_row = pd.Series({'open':bar.Open, 'high':bar.High,
                             'low':bar.Low,  'close':bar.Close,
                             'volume':bar.Volume}, name=ts)
        self.hist_df = pd.concat([self.hist_df, new_row.to_frame().T])

        # update return
        self.hist_df.at[ts, 'return'] = (
            self.hist_df.at[ts, 'close'] - self.hist_df.iloc[-2]['close']
        )

        # recompute only the latest row’s engineered features
        h = self.hist_df  # shorthand
        self.hist_df.at[ts, 'ema10']       = h['close'].ewm(span=10, adjust=False).mean().iloc[-1]
        self.hist_df.at[ts, 'ema20']       = h['close'].ewm(span=20, adjust=False).mean().iloc[-1]
        self.hist_df.at[ts, 'ema50']       = h['close'].ewm(span=50, adjust=False).mean().iloc[-1]
        self.hist_df.at[ts, 'lag1_return'] = h.iloc[-2]['return']
        self.hist_df.at[ts, 'lag2_return'] = h.iloc[-3]['return'] if len(h) > 2 else np.nan
        self.hist_df.at[ts, 'roll_std_10'] = h['return'].rolling(window=10).std().iloc[-1]
        self.hist_df.at[ts, 'roll_std_20'] = h['return'].rolling(window=20).std().iloc[-1]
        self.hist_df.at[ts, 'lag1_close']  = h.iloc[-2]['close']

        latest = self.hist_df.iloc[-1]
        if latest[self.features].isnull().any():
            return  # still warming up

        X = self.scaler.transform(latest[self.features].values.reshape(1, -1))
        pred_close = float(self.model.predict(X))

        # ----------------------------------------------------
        # Simple trading logic (replicable / replaceable)
        # ----------------------------------------------------
        price_now = bar.Close
        invested  = self.Portfolio[self.symbol]

        if not invested.Invested:
            if pred_close > price_now:
                self.SetHoldings(self.symbol, 1.0)   # long
            else:
                self.SetHoldings(self.symbol, -1.0)  # short
        else:
            if invested.IsLong and pred_close <= price_now:
                self.Liquidate(self.symbol)
            elif invested.IsShort and pred_close > price_now:
                self.Liquidate(self.symbol)
